
LCYMP_EMT_FRM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001c2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084c  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b9  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 00 	call	0xba	; 0xba <main>
  9e:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
		}
	}
}
void init_ports(void)
{
	DDRD  = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  aa:	1b b8       	out	0x0b, r1	; 11
	DDRB   &= ~(_BV(SWITCH_0) | _BV(SWITCH_1)); //Input
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	84 b9       	out	0x04, r24	; 4
	PORTB  |=  (_BV(SWITCH_0) | _BV(SWITCH_1)); //Pull-up
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <main>:
};
uint8_t i = 0;
//uint8_t i;
int main(void)
{
	init_ports();
  ba:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	while (1)
	{		
		if(bit_is_set(PINB,SWITCH_0) && bit_is_set(PINB,SWITCH_1)){  // 00
  be:	18 9b       	sbis	0x03, 0	; 3
  c0:	1d c0       	rjmp	.+58     	; 0xfc <main+0x42>
  c2:	19 9b       	sbis	0x03, 1	; 3
  c4:	1b c0       	rjmp	.+54     	; 0xfc <main+0x42>
			if(i>9){
  c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	10 f0       	brcs	.+4      	; 0xd2 <main+0x18>
				i = 0;
  ce:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			}
			DISPLAY = seg7_values[i];
  d2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e0 50       	subi	r30, 0x00	; 0
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x2c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x36>
  f0:	00 00       	nop
			_delay_ms(TIME);
			i++;
  f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		
		if(bit_is_clear(PINB,SWITCH_0) && bit_is_set(PINB,SWITCH_1)){ // 01
  fc:	18 99       	sbic	0x03, 0	; 3
  fe:	2a c0       	rjmp	.+84     	; 0x154 <main+0x9a>
 100:	19 9b       	sbis	0x03, 1	; 3
 102:	28 c0       	rjmp	.+80     	; 0x154 <main+0x9a>
			if(i<1){
 104:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 108:	81 11       	cpse	r24, r1
 10a:	0f c0       	rjmp	.+30     	; 0x12a <main+0x70>
				DISPLAY = seg7_values[0];
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	8b b9       	out	0x0b, r24	; 11
 112:	2f e9       	ldi	r18, 0x9F	; 159
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x5e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x68>
 122:	00 00       	nop
				_delay_ms(TIME);
				i = 9;
 124:	89 e0       	ldi	r24, 0x09	; 9
 126:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			}
			DISPLAY = seg7_values[i];
 12a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	8b b9       	out	0x0b, r24	; 11
 138:	2f e9       	ldi	r18, 0x9F	; 159
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x8e>
 148:	00 00       	nop
			_delay_ms(TIME);
			i--;
 14a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		
		if(bit_is_set(PINB,SWITCH_0) && bit_is_clear(PINB,SWITCH_1)){ // 10
 154:	18 9b       	sbis	0x03, 0	; 3
 156:	12 c0       	rjmp	.+36     	; 0x17c <main+0xc2>
 158:	19 99       	sbic	0x03, 1	; 3
 15a:	10 c0       	rjmp	.+32     	; 0x17c <main+0xc2>
			DISPLAY = seg7_values[i];
 15c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	80 81       	ld	r24, Z
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	2f e9       	ldi	r18, 0x9F	; 159
 16c:	86 e8       	ldi	r24, 0x86	; 134
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xb6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xc0>
 17a:	00 00       	nop
			_delay_ms(TIME);
		}
		
		if(bit_is_clear(PINB,SWITCH_0) && bit_is_clear(PINB,SWITCH_1)){ // 11
 17c:	18 99       	sbic	0x03, 0	; 3
 17e:	9f cf       	rjmp	.-194    	; 0xbe <main+0x4>
 180:	19 99       	sbic	0x03, 1	; 3
 182:	9d cf       	rjmp	.-198    	; 0xbe <main+0x4>
			if(i>9){
 184:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 188:	ea 30       	cpi	r30, 0x0A	; 10
 18a:	18 f0       	brcs	.+6      	; 0x192 <main+0xd8>
				i = 0;
 18c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 190:	10 c0       	rjmp	.+32     	; 0x1b2 <main+0xf8>
			}else if(i % 2 != 0){
 192:	e0 ff       	sbrs	r30, 0
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <main+0xf8>
				DISPLAY = seg7_values[i];
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	2f e9       	ldi	r18, 0x9F	; 159
 1a2:	86 e8       	ldi	r24, 0x86	; 134
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xec>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xf6>
 1b0:	00 00       	nop
				_delay_ms(TIME);
			}		
			i++;
 1b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1bc:	80 cf       	rjmp	.-256    	; 0xbe <main+0x4>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
